variables:
  DOCKERTAG: $CI_COMMIT_SHORT_SHA

stages:
  - check
  - docker
  - test
  - docs
  - deploy

clean:
  stage: check
  needs: []
  image: condaforge/mambaforge
  before_script:
    - mamba install -y -c fastai -c conda-forge nbdev nbstripout
  script:
    - nbdev_clean_nbs
    - find . -name "*.ipynb" | xargs nbstripout
    - |
      if [ ! -z "$(git status --porcelain)" ]; then
          echo "Notebooks are not cleaned! They still contain outputs and/or metadata."
          echo "You probably forgot to clear the notebook outputs before pushing."
          echo "Please make sure all pre-commit hooks are properly installed to prevent this issue."
          false;
      fi

diff:
  stage: check
  needs: []
  image: condaforge/mambaforge
  before_script:
    - mamba install -y -c fastai -c conda-forge nbdev
  script:
    - nbdev_diff_nbs | tee nbdev_diff_nbs.log
    - |
      if [ ! -z "$(nbdev_diff_nbs)" ]; then
          echo "Python library does not match backing notebooks (diff between notebooks and library detected). "
          echo "You probably forgot to re-generate the library before pushing."
          echo "Please make sure all pre-commit hooks are properly installed to prevent this issue."
          false;
      fi
  artifacts:
    paths:
      - nbdev_diff_nbs.log


docker:
  image: docker
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --no-cache --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" . && docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker build --no-cache --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH" . &&  docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH"
    - if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then docker build --no-cache --pull -t "$CI_REGISTRY_IMAGE:latest" . && docker push "$CI_REGISTRY_IMAGE:latest"; fi
  rules:
    - if: $DOCKERTAG == "$CI_COMMIT_SHORT_SHA"

test:
  stage: test
  image: $CI_REGISTRY_IMAGE:$DOCKERTAG
  script:
    - nbdev_test_nbs | tee nbdev_test_nbs.log
  artifacts:
    paths:
      - nbdev_test_nbs.log

run:
  stage: test
  image: $CI_REGISTRY_IMAGE:$DOCKERTAG
  script:
    - find . -name "*.ipynb" | grep -v '.ipynb_checkpoints' | xargs -I {} papermill {} {} -k python3
  artifacts:
    paths:
      - "*.ipynb"
      - ./utils
      - iframe_figures

docs:
  stage: docs
  image: $CI_REGISTRY_IMAGE:$DOCKERTAG
  script:
    - nbdev_build_lib
    - papermill source/00_index.ipynb source/00_index.ipynb -k python3 --cwd source
    - nbdev_build_docs
  artifacts:
    paths:
      - docs

pages:
  stage: deploy
  image: ruby:2.7
  script:
    - cd docs
    - bundle install
    - bundle exec jekyll build -d ../public
  artifacts:
    paths:
      - public
